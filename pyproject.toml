# https://docs.astral.sh/ruff/settings/
# https://docs.astral.sh/ruff/configuration/#full-command-line-interface
# cmd: ruff format  # Отформатирует все файлы в `.` текущем каталоге.
[tool.ruff]
required-version = "==0.3.1"
target-version = "py312"  # Версия python которую будет обслуживать ruff
line-length = 105  # Макс длина строки кода после которой будет выполнен автоперенос
indent-width = 4
force-exclude = true  # pre-commit файл будет использовать exclude список
src = ["app"]  # Корень проекта в котором лежат приложения  (необходимо для работы ruff.lint.isort)
extend-exclude = [
    "migrations",
]


[tool.ruff.format]
quote-style = "single"  # Использовать одинарные кавычки при форматировании файла
indent-style = "space"  # Использовать пробелы вместо табуляции при форматировании файла
# line-ending = "lf"  # Последовательность конца строки для файлов по умолчанию


# https://docs.astral.sh/ruff/linter/
# cmd: ruff check --fix  # Проверить линтером все файлы в `.` текущем каталоге и исправить все безопасные проблемы.
[tool.ruff.lint]
# Настройки по умолчанию: https://docs.astral.sh/ruff/configuration/
# https://docs.astral.sh/ruff/rules/
# select по умолчанию: ["E4", "E7", "E9", "F"]
extend-select = [
    # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    # https://docs.astral.sh/ruff/rules/#isort-i
    "I",  # isort
    # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "N",  # pep8-naming
    # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "UP",  # pyupgrade
    # https://docs.astral.sh/ruff/rules/#flake8-2020-ytt
    "YTT",  # flake8-2020
    # https://docs.astral.sh/ruff/rules/#flake8-async-async
    "ASYNC",  # flake8-async
    # https://docs.astral.sh/ruff/rules/#flake8-blind-except-ble
    "BLE",  # flake8-blind-except
    # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "B",  # flake8-bugbear
    # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "A",  # flake8-builtins
    # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "COM",  # flake8-commas
    # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "C4",  # flake8-comprehensions
    # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "DTZ",  # flake8-datetimez
    # https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
    "T10",  # flake8-debugger
    # https://docs.astral.sh/ruff/rules/#flake8-django-dj
    "DJ",  # flake8-django
    # https://docs.astral.sh/ruff/rules/#flake8-future-annotations-fa
    "FA",  # flake8-future-annotations
    # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "ISC",  # flake8-implicit-str-concat
    # https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
    "ICN",  # flake8-import-conventions
    # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "G",  # flake8-logging-format
    # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "INP",  # flake8-no-pep420
    # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "PIE",  # flake8-pie
    # https://docs.astral.sh/ruff/rules/#flake8-pyi-pyi
    "PYI",  # flake8-pyi
    # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "Q",  # flake8-quotes
    # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RSE",  # flake8-raise
    # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "RET",  # flake8-return
    # https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SLF",  # flake8-self
    # https://docs.astral.sh/ruff/rules/#flake8-slots-slot
    "SLOT",  # flake8-slots
    # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SIM",  # flake8-simplify
    # https://docs.astral.sh/ruff/rules/#flake8-tidy-imports-tid
    "TID",  # flake8-tidy-imports
    # https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "TCH",  # flake8-type-checking
    # https://docs.astral.sh/ruff/rules/#flake8-gettext-int
    "INT",  # flake8-gettext
    # https://docs.astral.sh/ruff/rules/#flynt-fly
    "FLY",  # flynt
    # https://docs.astral.sh/ruff/rules/#perflint-perf
    "PERF",  # Perflint
    #! https://docs.astral.sh/ruff/rules/#refurb-furb
    #! "FURB",  # refurb  (пока что не стабильно 29.03.2024)
    # https://docs.astral.sh/ruff/rules/#flake8-logging-log
    "LOG",  # flake8-logging
    # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "RUF",  # Ruff-specific rules
]
ignore = [
    # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "F401",  # unused-import
    "F841",  # unused-variable
    "F403",  # undefined-local-with-import-star  (не ругаться на использование from ... import *)
    # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "UP031",  # printf-string-formatting  (не ругаться на форматирование с помощью %s)
    # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "G004",  # logging-f-string  (не ругаться на использование f-строк для сообщения лога)
    # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "RUF001",  # ambiguous-unicode-character-string  (не ругаться на кириллицу в строках)
    "RUF002",  # ambiguous-unicode-character-docstring  (не ругаться на кириллицу в докстрингах)
    "RUF003",  # ambiguous-unicode-character-comment  (не ругаться на кириллицу в комментариях)
    "RUF012",  # mutable-class-default  (не ругаться на мутабельность коллекций)
    # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "PT009",  # pytest-unittest-assertion  (не ругаться на unittest ассерты)
    # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "ISC001",  # single-line-implicit-string-concatenation  (конфликт с `COM812`)
    # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "COM812",  # flake8-commas  (конфликт с `ISC001`)
    # https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SLF001",  # private-member-access  (не ругаться на приватные названия объектов)
    # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SIM105",  # suppressible-exception  (не ругаться на использование try except pass блока)
    # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "RET503",  # implicit-return  (не ругаться на отсутствие return None в конце функций)
    # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    # {} VS dict()  # https://switowski.com/blog/dict-function-vs-literal-syntax/
    "C408",  # unnecessary-collection-call  (не ругаться на использование классов коллекций вместо их литералов)
    # https://docs.astral.sh/ruff/rules/#flake8-blind-except-ble
    "BLE001",  # blind-except  (не ругаться на обработку обычного Exception)
    # https://docs.astral.sh/ruff/rules/#flake8-django-dj  #! (ВРЕМЕННО)
    "DJ001",  # django-nullable-model-string-field  (не ругаться на использование null в моделях для текстовых полей)
]
# Не давать исправлять эти ошибки в тултипе, и в том числе автоматически при линте через команду
unfixable = [
]


[tool.ruff.lint.per-file-ignores]
"asgi.py" = ["E402"]
"settings.py" = ["F405", "E501"]
"local_settings.py" = ["F405"]
"prod_settings.py" = ["F405"]


# https://docs.astral.sh/ruff/settings/#lintisort
[tool.ruff.lint.isort]
force-wrap-aliases = true  # Записывать импорты с несколькими `as` в кортеже
combine-as-imports = true  # Записывать импорты с несколькими `as` в одной строке
# force-sort-within-sections = true  # Всегда сортировать импорты по алфавиту, не обращая внимание на порядок import или from
# from-first = true  # Записывать from импорты перед import
# length-sort = true  # Сортировать импорты по длине строки а не по алфавиту
# lines-after-imports = 2  # Количество пустых строк после последнего импорта
# order-by-type = true  # Сортировать по регистру в дополнение к сортировке по алфавиту
# required-imports = ["from __future__ import annotations"]  # Добавить импорт во все файлы


[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"  # Не ругаться на одинарные кавычки
docstring-quotes = "double"  # Ругаться на одинарные кавычки


[tool.ruff.lint.flake8-bugbear]
# Не ругаться на установку указанных объектов в качестве значений по умолчанию у аргументов функций
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.Query"
]
