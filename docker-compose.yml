version: '3.8'

# useful info
# https://github.com/pplonski/simple-tasks
# https://github.com/jhnoor/docker-nginx-django-channels.git
# https://stackoverflow.com/a/45817394/19276507
# https://stackoverflow.com/a/72792416/19276507

services:

    nginx:
        container_name: nginx
        image: nginx
        restart: always
        command: [nginx, '-g', 'daemon off;']
        volumes:
            - ./docker/nginx/templates/:/etc/nginx/templates
            - static_volume:/app/static
            - media_volume:/app/media
        environment:
            SERVER_HOST: ${SERVER_HOST}
            SERVER_IP: ${SERVER_IP}
            SERVER_PORT: 80
            WSGI_SERVER_HOST: wsgiserver
            WSGI_SERVER_PORT: 8000
            ASGI_SERVER_HOST: asgiserver
            ASGI_SERVER_PORT: 8001
        ports:
            - 80:80
        depends_on:
            - wsgiserver
            - asgiserver
        networks:
            - front
            - back


    postgres:
        container_name: postgres
        image: postgres
        restart: always
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - 5432:5432
        networks:
            - back


    redis:
        container_name: redis
        image: redis
        restart: unless-stopped
        command: redis-server /usr/local/etc/redis/redis.conf
        volumes:
            - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
        ports:
            - 6379:6379
        networks:
            - back


#    rabbitmq:
#        image: rabbitmq
#        restart: unless-stopped
#        networks:
#            - back


    wsgiserver:
        container_name: wsgiserver
        build: ./
        command: >
            sh -c "python manage.py collectstatic --no-input &&
            python manage.py makemigrations --noinput &&
            python manage.py migrate &&
            gunicorn FriskesSite.wsgi:application --bind 0.0.0.0:8000 --timeout 600 --workers 1 --threads 1"
#            --log-level=debug --error-logfile=/var/log/gunicorn/error.log --access-logfile=/var/log/gunicorn/access.log"
        volumes:
            #- /var/log/gunicorn:/var/run/gunicorn
            - static_volume:/app/static
            - media_volume:/app/media
        env_file:
            - ./.env
        expose:
            - 8000
        depends_on:
            - postgres
            - redis
            #- rabbitmq
        networks:
            - front
            - back


    asgiserver:
        container_name: asgiserver
        build: ./
        command: daphne FriskesSite.asgi:application -b 0.0.0.0 -p 8001
        #--access-log=/var/log/daphne/access.log
        #volumes:
            #- /var/log/daphne:/var/run/daphne
        env_file:
            - ./.env
        expose:
            - 8001
        depends_on:
            - postgres
            - redis
            #- rabbitmq
        networks:
            - front
            - back


    celery-worker:
        container_name: celery-worker
        build: ./
        entrypoint: ./docker/backend/celery-worker-entrypoint.sh
        volumes:
            - /var/log/celery:/var/run/celery
        environment:
            CELERY_APP: ${CELERY_APP}
            REDIS_HOST: ${REDIS_HOST}
        depends_on:
            - postgres
            - redis
            #- rabbitmq
        networks:
            - back


    celery-beat:
        container_name: celery-beat
        build: ./
        entrypoint: ./docker/backend/celery-beat-entrypoint.sh
        volumes:
            - /var/log/celery:/var/run/celery
        environment:
            CELERY_APP: ${CELERY_APP}
            POSTGRES_ENGINE: ${POSTGRES_ENGINE}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_HOST: ${POSTGRES_HOST}
            POSTGRES_PORT: ${POSTGRES_PORT}
        depends_on:
            - postgres
            - redis
            #- rabbitmq
        networks:
            - back


    celery-flower:
        container_name: celery-flower
        build: ./
        entrypoint: ./docker/backend/celery-flower-entrypoint.sh
        volumes:
            - /var/log/celery:/var/run/celery
        environment:
            CELERY_APP: ${CELERY_APP}
            CELERY_FLOWER_URL_PREFIX: ${CELERY_FLOWER_URL_PREFIX}
            CELERY_FLOWER_ADDRESS: ${CELERY_FLOWER_ADDRESS}
            CELERY_FLOWER_PORT: ${CELERY_FLOWER_PORT}
        ports:
            - 5555:5555
        depends_on:
            - postgres
            - redis
            #- rabbitmq
        networks:
            - back


volumes:
    postgres_data:
    static_volume:
    media_volume:


networks:
    front:
    back:
